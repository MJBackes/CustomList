CustomList<T> - Operator Method
Namespace: MyCustomList
Assemblies: System, System.Collections.Generic, System.Linq, System.Text, System.Threading.Tasks

Returns a new CustomList<T> containing the elements of the first operand CustomList<T> except those that 
are common to both operand CustomList<T>s.

public static CustomList<T> operator -(CustomList<T> list1, CustomList<T> list2)

Parameters

	list1 CustomList<T>
		The CustomList<T> whose elements will be put in the returned CustomList<T> if they are not shared with  list2.

	list2 CustomList<T>
		The CustomList<T> containing elements to be omitted from the returned CustomList<T>.

Returns

	CustomList<T>
		 A new CustomList<T> containing all the elements of list1, less the elements of list2.
			NOTE: Only the first instance of an element is removed from list1 for each instance of that element in list2.
			See Examples below for an instance of this behavior.

Examples

	The following code snippet shows how to instanciate two lists, populate them, and then apply the - operator to them.
		{
		            	CustomList<int> list1 = new CustomList<int>();
           		            	CustomList<int> list2 = new CustomList<int>();
            			list1.Add(1);
            			list1.Add(3);
            			list1.Add(5);	//list1 = {1,3,5}
            			list2.Add(3);
           			list2.Add(5);
           			list2.Add(7);	//list2 = {3,5,7}
			CustomList<int> result = list1 - list2;
			Console.WriteLine(result.ToString()); 	//result = {1} as 3 and 5 are common to both lists 
			//Console output: 1			//and were therefore not included in the result of the operation.
							//The 7 is not present as only elements of the first CustomList<T>
							//will be included in the list returned by the method.
		}

	The following code snippet displays how the - operator interacts with CustomList<T>s with repeating elements.
		{
			CustomList<char> list1 = new CustomList<char>();
            			CustomList<char> list2 = new CustomList<char>();
            			list1.Add('A');
            			list1.Add('A');
            			list1.Add('A');
            			list1.Add('B');
            			list1.Add('B');	//list1 = {'A','A','A','B','B'}
            			list2.Add('A');
            			list2.Add('B');
            			list2.Add('B');	//list2 = {'A','B','B'}
			CustomList<int> result = list1 - list2;
			Console.WriteLine(result.ToString());	//result = {'A',A'} as only the first 'A' but both 'B's were omitted 
			//Console output: AA		//from the result because 'A' only occurs once in list2 while 'B'
							//occurs twice.
		}
Remarks
	If type T implements the IEquatable<T> generic interface, the equality comparer is the Equals method of that interface; 
	otherwise, the default equality comparer is Object.Equals.